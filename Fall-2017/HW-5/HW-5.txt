| نیم سال اول ۹۶-۹۷ | مبانی برنامه نویسی | موعد تحویل: ۹ آذر ۱۳۹۶ ساعت ۲۲:۰۰ |
|:---------------------|:------------------:|:-----------------------------------:|

لطفا به موارد زیر توجه نمایید:
1. در این تمرینات تا حد ممکن برنامه خود را به توابع مختلف (هر چند توابعی کوچک) بشکنید.

## سوال اول

الف) تابع reg_index اعداد n و m و dir را به عنوان ورودی می‌گیرد که در آن n یک عدد صحیح مثبت چند رقمی، m یک رقم  و dir یا ۱- یا ۱+ است. 


    int dig_index(int n, int m, int dir)


خروجی این تابع یک عدد است که مشخص میکند رقم m چندمین رقم از سمت راست (اگر dir = +1 باشد) یا سمت چپ (اگر dir = -1 باشد) عدد n است. اگر رقم m در n نباشد 0 تولید می‌شود. برای مثال:

    dig_index(1000, 0, -1) => 2
    
    dig_index(1000, 0, 1) => 1
    
    dig_index(1000, 2, 1) => 0

تعریف این تابع را بنویسید.

ب) با استفاده از این تابع، تعريف تابع زیر را بنويسيد که یک عدد را می‌گیرد و اگر عدد متقارن باشد 1 و در غیر این صورت 0 تولید می‌کند

    int sym(int n)

ج) يك برنامه بنويسيد كه يك عدد صحيح مثبت را بگيرد و تعيين كند كه متقارن است يا نه؟ 

فرمت ورودی:

    <n>

فرمت خروجی:

    <True>/<False>

## سوال دوم
تابعی به اسم max_factor بنويسيد كه عدد صحيح n را بگيرد و بزرگترين عامل اول آن را برگرداند.

تابع ديگری به اسم all_factors بنويسيد كه عدد صحيح n را بگيرد و با استفاده از تابع max_factor همه عامل‌های اول عدد n را چاپ كند. تعداد دفعات تكرار هر عامل آن نيز مشخص شود.

برنامه‌ای بنويسيد كه عدد m را از كاربر بگيرد و برای همه اعداد 1 تا m تابع all_factor را فراخوانی كند.

(۱۰ نمره اضافی در صورتی كه all_factors به صورت بازگشتی باشد).

فرمت ورودی:

    <m>

ورودی:

	10

فرمت خروجی:

	1 = <factor>^<repeat> * <factor>^<repeat> ...
	2 = <factor>^<repeat> * <factor>^<repeat> ...
	3 = <factor>^<repeat> * <factor>^<repeat> ...
	.
	.
	.
	m = <factor>^<repeat> * <factor>^<repeat> ...

خروجی:

	1 = 1
	2 = 1 * 2^1
	3 = 1 * 3^1
	4 = 1 * 2^2
	5 = 1 * 5^1
	6 = 1 * 2^1 * 3^1
	7 = 1 * 7^1
	8 = 1 * 2^3
	9 = 1 * 3^2
	10 = 1 * 2^1 * 5^1

## سوال سوم

تركيب m از  n را می‌توان با رابطه بازگشتی به صورت زير نوشت:

$$
\binom{n}{m} = \binom{n-1}{m} + \binom{n-1}{m-1}
$$

الف) شرط (شرط‌های) مناسب پايه براي اتمام رابطه بازگشتی را تعيين كنيد.

ب) تابع بازگشتی برای پياده‌سازی تركيب m از  n را بنويسيد:

    int combination(int n, int m)

ج)‌ برنامه‌ای بنویسید که عدد n و m را از کاربر گرفته و ترکیب m از n و تعداد دفعات فراخوانی تابع combination را محاسبه کند.

فرمت ورودی:

	<n> <m>

ورودی:

    10 2

فرمت خروجی:

	<combination>
	<combination call number>

خروجی:

    45
    111

## سوال چهارم
برای حدس Goldbach طبق الگوريتم شرح داده شده در كلاس توابع زير را پیاده سازی كنيد.

    int is_prime(int n);
    
    int next_prime_number(int n);
    
    int check_Goldbach(int n);

با استفاده از اين توابع، تابع main را بنويسيد كه یک عدد را از كاربر بگيرد و اين حدس را برای تمام اعداد زوج بزرگتر از دو و كوچكتر از اين عدد بررسی كرده و دو مقدار عدد اول مورد نظر را چاپ كند.

فرمت ورودی:

    <n>

ورودی:

    10

فرمت خروجی:

    Even number: <e>
    Prime 1: <p>
    Prime 2: <p>

خروجی:

    Even number: 4
    Prime 1: 2
    Prime 2: 2
    Even number: 6
    Prime 1: 3
    Prime 2: 3
    Even number: 8
    Prime 1: 3
    Prime 2: 5
    Even number: 10
    Prime 1: 3
    Prime 2: 7

## بازی حدس زدن اعداد
در تمرين هدف اين است كه بازی ساده حدس اعداد نوشته شود. اين برنامه به اين صورت عمل می‌كند كه در ابتدا نوبت كامپيوتر است بنابراين برنامه عددی بين 0 تا 1000 را در نظر می‌گيرد. كاربر سعي می‌كند اين عدد را پيدا كند. به ازای هر عددی كه كاربر حدس می‌زند برنامه مشخص مي‌كند كه آيا اين حدس از عدد مد نظر بزرگتر يا كوچكتر است.

زمانی كه كاربر عدد مد نظر كامپيوتر را به درستي حدس زد، نوبت كاربر مي‌شود و اين بار كامپيوتر سعی می‌كند عدد را حدس بزند و كاربر برای هر حدس كامپيوتر، بزرگی يا كوچکی آنرا مشخص می‌کند. با حدس درست برنامه نوبت كامپيوتر مي‌شود و اين‌ بازي ادامه مي‌يابد تا جايي كه كاربر سه بار عدد 0 را پشت سر هم وارد كند. زماني كه بازي تمام شد در انتها برنامه تعداد حدس‌هاي غلطي كه كاربر و كامپيوتر در كل بازي داشته‌اند را چاپ مي‌كند.

برنامه خود را طوری بنويسيد كه **به طور متوسط كمترين مقايسه‌ها** را داشته باشد.

## بازی حدس زدن اعداد (اختیاری)
فرض کنید در بازی حدس زدن اعداد برنامه كامپيوتری تقلب می‌كند!!!.

برنامه هر بار جواب درست را در خصوص كوچک يا بزرگ بودن حدس كاربر نمی‌دهد! بلكه يك مقدار x وجود دارد كه نشان دهنده احتمال تقلب كامپيوتر است. مثلا اگر x=0 باشد يعنی هيچ تقلبی در كار نيست. x=0.5 به معني غلط بودن جواب‌های كامپيوتر در 50% موارد است. برنامه بازی را به نحوی تغيير دهيد كه در ابتدای بازی مقدار x را از كاربر بگيرد و در ادامه به همان ميزان در بازی تقلب كند.